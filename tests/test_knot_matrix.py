import numpy as np
from pyarcknot.knot_matrix import (clean_k_arc, xo_arc, xco_xo, xco_arc, arc_xoco,
                            xabo_xco, xABo_xco)


def test_clean_k_arc():
    assert (clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8") ==
            [[7, 2],
             [4, 1],
             [5, 3],
             [8, 4],
             [2, 6],
             [1, 5],
             [3, 7],
             [6, 8]]
            ).all()


def test_xo_arc():
    assert (xo_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8")) ==
            [[0, 0, 0, 0, 0, 1, 0, 2],
             [0, 0, 1, 0, 0, 0, 2, 0],
             [1, 0, 0, 0, 2, 0, 0, 0],
             [0, 1, 0, 0, 0, 2, 0, 0],
             [0, 0, 0, 2, 0, 0, 0, 1],
             [0, 0, 2, 0, 1, 0, 0, 0],
             [2, 0, 0, 1, 0, 0, 0, 0],
             [0, 2, 0, 0, 0, 0, 1, 0]]
            ).all()


def test_xco_xo():
    assert (xco_xo(xo_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8"))) ==
            [[0, 0, 0, 0, 0, 1, 0, 2],
             [0, 0, 1, 0, 0, 3, 2, 0],
             [1, 0, 3, 0, 2, 0, 0, 0],
             [0, 1, 3, 0, 3, 2, 0, 0],
             [0, 0, 0, 2, 3, 0, 3, 1],
             [0, 0, 2, 3, 1, 0, 0, 0],
             [2, 3, 0, 1, 0, 0, 0, 0],
             [0, 2, 0, 0, 0, 0, 1, 0]]
            ).all()


def test_xco_arc():
    assert (xco_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8")) ==
            [[0, 0, 0, 0, 0, 1, 0, 2],
             [0, 0, 1, 0, 0, 3, 2, 0],
             [1, 0, 3, 0, 2, 0, 0, 0],
             [0, 1, 3, 0, 3, 2, 0, 0],
             [0, 0, 0, 2, 3, 0, 3, 1],
             [0, 0, 2, 3, 1, 0, 0, 0],
             [2, 3, 0, 1, 0, 0, 0, 0],
             [0, 2, 0, 0, 0, 0, 1, 0]]
            ).all()


def test_arc_xo():
    assert (arc_xoco(xo_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8"))) ==
            [[7, 2],
             [4, 1],
             [5, 3],
             [8, 4],
             [2, 6],
             [1, 5],
             [3, 7],
             [6, 8]]
            ).all()


def test_arc_xco():
    assert (arc_xoco(xco_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8"))) ==
            [[7, 2],
             [4, 1],
             [5, 3],
             [8, 4],
             [2, 6],
             [1, 5],
             [3, 7],
             [6, 8]]
            ).all()


def test_xabo_xco_1():
    assert (xabo_xco(xco_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8")), 4) ==
            [[0, 0, 0, 0, 0, 1, 0, 2],
             [0, 0, 1, 0, 0, 4, 2, 0],
             [1, 0, 4, 0, 2, 0, 0, 0],
             [0, 1, 4, 0, 4, 2, 0, 0],
             [0, 0, 0, 2, 4, 0, 4, 1],
             [0, 0, 2, 4, 1, 0, 0, 0],
             [2, 4, 0, 1, 0, 0, 0, 0],
             [0, 2, 0, 0, 0, 0, 1, 0]]
            ).all()


def test_xabo_xco_2():
    assert (xabo_xco(xco_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8")),
                     [4, 5, 4, 5, 4, 5, 4, 5]) ==
            [[0, 0, 0, 0, 0, 1, 0, 2],
             [0, 0, 1, 0, 0, 4, 2, 0],
             [1, 0, 5, 0, 2, 0, 0, 0],
             [0, 1, 4, 0, 5, 2, 0, 0],
             [0, 0, 0, 2, 4, 0, 5, 1],
             [0, 0, 2, 4, 1, 0, 0, 0],
             [2, 5, 0, 1, 0, 0, 0, 0],
             [0, 2, 0, 0, 0, 0, 1, 0]]
            ).all()


def test_xABo_xco():
    assert (xABo_xco(xco_arc(clean_k_arc("2 7 1 4 3 5 4 8 2 6 1 5 3 7 6 8")),
                     np.array([4, 5, 4, 5, 4, 5, 4, 5], dtype=np.int8)) ==
            [[0, 0, 0, 0, 0, 1, 0, 2],
             [0, 0, 1, 0, 0, 4, 2, 0],
             [1, 0, 5, 0, 2, 0, 0, 0],
             [0, 1, 4, 0, 5, 2, 0, 0],
             [0, 0, 0, 2, 4, 0, 5, 1],
             [0, 0, 2, 4, 1, 0, 0, 0],
             [2, 5, 0, 1, 0, 0, 0, 0],
             [0, 2, 0, 0, 0, 0, 1, 0]]
            ).all()

